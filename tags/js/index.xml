<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Js on 仍迟</title>
    <link>https://rengchi.github.io/tags/js/</link>
    <description>Recent content in Js on 仍迟</description>
    <generator>Hugo -- 0.145.0</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 04 Mar 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://rengchi.github.io/tags/js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JQuery 方法</title>
      <link>https://rengchi.github.io/posts/tech/jq-util/</link>
      <pubDate>Tue, 04 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://rengchi.github.io/posts/tech/jq-util/</guid>
      <description>&lt;h1 id=&#34;拖动&#34;&gt;拖动&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(function ($) {
    $.fn.draggable = function () {
        var isDragging = false;
        var offsetX, offsetY;
        var $draggingElement;
        var isDragEvent = false; // 标记是否是拖动操作
        var dragThreshold = 5;   // 拖动的最小距离阈值，超过该距离就认为是拖动

        function savePosition(element, left, top) {
            document.cookie = `${element.attr(&amp;#39;id&amp;#39;)}_position=${left},${top};path=/`;
        }

        function loadPosition(element) {
            var cookies = document.cookie.split(&amp;#39;; &amp;#39;);
            var elementId = element.attr(&amp;#39;id&amp;#39;);
            for (var i = 0; i &amp;lt; cookies.length; i++) {
                var parts = cookies[i].split(&amp;#39;=&amp;#39;);
                if (parts[0] === `${elementId}_position`) {
                    return parts[1].split(&amp;#39;,&amp;#39;).map(Number);
                }
            }
            return null;
        }

        this.each(function () {
            var $this = $(this);
            var position = loadPosition($this);
            if (position) {
                $this.css({
                    position: &amp;#39;fixed&amp;#39;,
                    left: position[0] + &amp;#39;px&amp;#39;,
                    top: position[1] + &amp;#39;px&amp;#39;
                });
            } else {
                $this.css(&amp;#39;position&amp;#39;, &amp;#39;fixed&amp;#39;);
            }
        });

        this.on(&amp;#39;mousedown&amp;#39;, function (e) {
            $draggingElement = $(this);
            var originalPos = $draggingElement.offset();

            $draggingElement.css({
                left: originalPos.left + &amp;#39;px&amp;#39;,
                top: originalPos.top + &amp;#39;px&amp;#39;
            });

            isDragging = true;
            offsetX = e.clientX - originalPos.left;
            offsetY = e.clientY - originalPos.top;
            isDragEvent = false; // 标记拖动开始
            e.preventDefault(); // 防止文本选择
        });

        $(document).on(&amp;#39;mousemove&amp;#39;, function (e) {
            if (isDragging) {
                var newLeft = e.clientX - offsetX;
                var newTop = e.clientY - offsetY;

                if (Math.abs(newLeft - $draggingElement.offset().left) &amp;gt; dragThreshold ||
                    Math.abs(newTop - $draggingElement.offset().top) &amp;gt; dragThreshold) {
                    isDragEvent = true;
                }

                $draggingElement.css({ left: newLeft + &amp;#39;px&amp;#39;, top: newTop + &amp;#39;px&amp;#39; });
                savePosition($draggingElement, newLeft, newTop);
            }
        });

        $(document).on(&amp;#39;mouseup&amp;#39;, function () {
            isDragging = false;
        });

        this.on(&amp;#39;click&amp;#39;, function (e) {
            if (isDragEvent) {
                e.stopImmediatePropagation();
                return false;
            }
        });

        return this;
    };
})(jQuery);
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>JS 方法</title>
      <link>https://rengchi.github.io/posts/tech/js-util/</link>
      <pubDate>Tue, 04 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://rengchi.github.io/posts/tech/js-util/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;相差天数&lt;/p&gt;&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;function calculateDayDifference(deliveryTime) {
    // 将传入的日期字符串转换为 Date 对象
    let deliveryDate = new Date(deliveryTime);
    let currentDate = new Date();

    // 将时间部分归零，以便仅比较日期部分
    deliveryDate.setHours(0, 0, 0, 0);
    currentDate.setHours(0, 0, 0, 0);

    // 计算两个日期之间的毫秒级时间差
    let timeDifference = deliveryDate.getTime() - currentDate.getTime();

    // 将时间差转换为天数，并返回
    return Math.floor(timeDifference / (1000 * 60 * 60 * 24));
}
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;当前日期&lt;/p&gt;&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;function formatNumber(num) {
    return String(num).padStart(2, &amp;#39;0&amp;#39;);
}

function formatDate(date = new Date(), format = &amp;#39;YYYY-MM-DD HH:mm:ss&amp;#39;) {
    const replacements = {
        YYYY: date.getFullYear(),
        MM: formatNumber(date.getMonth() + 1),
        DD: formatNumber(date.getDate()),
        HH: formatNumber(date.getHours()),
        mm: formatNumber(date.getMinutes()),
        ss: formatNumber(date.getSeconds())
    };

    return format.replace(/YYYY|MM|DD|HH|mm|ss/g, match =&amp;gt; replacements[match]);
}

console.log(formatDate());                    // 默认格式: 2024-03-04 14:30:15
console.log(formatDate(new Date(), &amp;#39;MM/DD&amp;#39;)); // 03/04
console.log(formatDate(new Date(), &amp;#39;HH:mm&amp;#39;)); // 14:30
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;复选框选中状态&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
